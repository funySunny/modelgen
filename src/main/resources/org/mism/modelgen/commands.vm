package $model.package;

import org.mism.command.CommandFactory;
import org.mism.command.Command;
import org.mism.command.CommandTemplate;
import org.mism.command.templates.ModifyCommandTemplate;
import org.mism.command.templates.AddNewElementCommandTemplate;
import org.mism.command.templates.RemoveElementCommandTemplate;
import org.mism.command.templates.ClearElementsCommandTemplate;
import java.util.Map;
import java.util.List;
import java.util.HashMap;
import java.util.Collection;
#foreach ($type in $model.types)
import ${model.package}.$type.clzzName;
#end

public class ModelCommandFactory implements CommandFactory
{
    Map<Class<?>, List<Class<? extends CommandTemplate<?>>>> modelCommands = new HashMap<Class<?>, List<Class<? extends CommandTemplate<?>>>>();

#foreach ($type in $model.types)##
    // start Type $type.simpleName
#foreach ($prop in $type.properties)
#if ($prop.containedType)
    public static class AddElementTo${type.simpleName}${prop.name} extends AddNewElementCommandTemplate<$type.clzzName, $prop.containedType>
    {
        $prop.containedTypeDescr.clzzName newElement;
        
        public void prepare($type.clzzName object)
        {
            this.object = object;
            this.newElement = new ${prop.containedTypeDescr.clzzName}();
        }

        // proxy getters and setters
#foreach ($subProp in $prop.containedTypeDescr.properties)
        ${subProp.type} ${subProp.nameCc};
        public void set${subProp.name}(${subProp.type} value)
        {
           this.newElement.set${subProp.name}(value);
        }
        public $subProp.type get${subProp.name}()
        {
           return this.newElement.get${subProp.name}();
        }
#end
        // end proxy getters and setters
    }
    
    public static class RemoveElementFrom${type.simpleName}${prop.name} extends RemoveElementCommandTemplate<$type.clzzName, $prop.containedType>
    {
        public void prepare($type.clzzName object)
        {
            this.object = object;
            this.collectionRef = object.get${prop.name}Ref();
        }
    }
    
    public static class Clear${type.simpleName}${prop.name} extends ClearElementsCommandTemplate<${type.clzzName}, ${prop.containedType}>
    {
        public void prepare($type.clzzName object)
        {
            this.object = object;
            this.collectionRef = object.get${prop.name}Ref();
            this.collectionClone = object.get${prop.name}();
        }
    }
#else
    public static class Modify${type.simpleName}${prop.name} extends ModifyCommandTemplate<$type.clzzName, $prop.type>
    {
        public void execute()
        {
           object.set${prop.name}(newValue);
        }
        public void rollback()
        {
           object.set${prop.name}(oldValue);
        }
        public void prepare($type.clzzName obj)
        {
           object = obj;
           oldValue = obj.get${prop.name}();
        }
    }
#end
#end
    // end Type $type.simpleName
#end

    public List<Class<? extends CommandTemplate<?>>> getCommandTemplates(Class<?> modelClass)
    {
        return modelCommands.get(modelClass);
    }

}